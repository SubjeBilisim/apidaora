{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"apidaora OpenAPI / HTTP / REST API using dataclasses and TypedDict annotation for python Documentation : https://dutradda.github.io/apidaora Source Code : https://github.com/dutradda/apidaora Key Features Declaration of request/response as dataclasses and dicts using typing annotations Input data validation with jsondaora One of the fastest python api framework Can run on any asgi server Requirements Python 3.8+ jsondaora for json validation/parsing orjson for json/bytes serialization (jsondaora dependency) Instalation $ pip install apidaora Simple example from apidaora import appdaora , route @route . get ( '/hello' ) def hello_controller ( name : str ) -> str : return f 'Hello {name} !' app = appdaora ( hello_controller ) Running the server (needs uvicorn installed ): uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Quering the server (needs curl installed ): curl -i localhost:8000/hello?name = World HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 14 \"Hello World!\" Basic example from typing import TypedDict from jsondaora import IntegerField , StringField , jsondaora from apidaora import Header , appdaora , route class Integer ( IntegerField , minimum = 18 ): ... class String ( StringField , max_length = 100 ): ... class Age ( Header , type = Integer ): ... @jsondaora class You ( TypedDict ): name : str last_name : str location : str age : int @jsondaora class ReqBody ( TypedDict ): last_name : str @jsondaora class HelloOutput ( TypedDict ): hello_message : str about_you : You @route . put ( '/hello/ {name} ' ) async def hello_controller ( name : str , location : String , age : Age , body : ReqBody ) -> HelloOutput : you = You ( name = name , location = location . value , age = age . value . value , last_name = body [ 'last_name' ], ) return HelloOutput ( hello_message = await hello_message ( name , location . value ), about_you = you ) async def hello_message ( name : str , location : str ) -> str : return f 'Hello {name} ! Welcome to {location} !' app = appdaora ( hello_controller ) Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Quering the server: curl -i -X PUT localhost:8000/hello/Me?location = World \\ -H 'x-age: 32' \\ -d '{\"last_name\":\"My Self\"}' HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 123 {\"hello_message\":\"Hello Me! Welcome to World!\",\"about_you\":{\"name\":\"Me\",\"location\":\"World\",\"age\":32,\"last_name\":\"My Self\"}} Example for more request/response details from http import HTTPStatus from typing import Dict from jsondaora import jsondaora from apidaora import BadRequestError , Header , Response , appdaora , json , route # Domain layer, here are the domain related definitions # it is apidaora/framework/http independent @jsondaora class You : name : str last_name : str age : int DB : Dict [ str , You ] = {} def add_you ( you : You ) -> None : if you . name in DB : raise YouAlreadyBeenAddedError ( you . name ) DB [ you . name ] = you def get_you ( name : str ) -> You : try : return DB [ name ] except KeyError : raise YouWereNotFoundError ( name ) class DBError ( Exception ): @property def info ( self ) -> Dict [ str , str ]: return { 'name' : self . args [ 0 ]} class YouAlreadyBeenAddedError ( DBError ): name = 'you-already-been-added' class YouWereNotFoundError ( DBError ): name = 'you-were-not-found' # Application layer, here are the http related definitions # See: https://dutrdda.github.io/apidaora/tutorial/headers/ class ReqID ( Header , type = str , http_name = 'http_req_id' ): ... @route . post ( '/you/' ) async def add_you_controller ( req_id : ReqID , body : You ) -> Response : try : add_you ( body ) except YouAlreadyBeenAddedError as error : raise BadRequestError ( name = error . name , info = error . info ) from error return json ( body , HTTPStatus . CREATED , headers = ( req_id ,)) @route . get ( '/you/ {name} ' ) async def get_you_controller ( name : str , req_id : ReqID ) -> Response : try : return json ( get_you ( name ), headers = ( req_id ,)) except YouWereNotFoundError as error : raise BadRequestError ( name = error . name , info = error . info ) from error app = appdaora ([ add_you_controller , get_you_controller ]) Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Quering the server: curl -X POST -i localhost:8000/you/ -H 'http_req_id: 1a2b3c4d' -d '{\"name\":\"Me\",\"last_name\":\"Myself\",\"age\":32}' HTTP/1.1 201 Created date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 43 http_req_id: 1a2b3c4d {\"name\":\"Me\",\"last_name\":\"Myself\",\"age\":32} curl -i localhost:8000/you/Me -H 'http_req_id: 4d3c2b1a' HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 43 http_req_id: 4d3c2b1a {\"name\":\"Me\",\"last_name\":\"Myself\",\"age\":32} Benchmark The full results can be found here","title":"apidaora"},{"location":"#apidaora","text":"OpenAPI / HTTP / REST API using dataclasses and TypedDict annotation for python Documentation : https://dutradda.github.io/apidaora Source Code : https://github.com/dutradda/apidaora","title":"apidaora"},{"location":"#key-features","text":"Declaration of request/response as dataclasses and dicts using typing annotations Input data validation with jsondaora One of the fastest python api framework Can run on any asgi server","title":"Key Features"},{"location":"#requirements","text":"Python 3.8+ jsondaora for json validation/parsing orjson for json/bytes serialization (jsondaora dependency)","title":"Requirements"},{"location":"#instalation","text":"$ pip install apidaora","title":"Instalation"},{"location":"#simple-example","text":"from apidaora import appdaora , route @route . get ( '/hello' ) def hello_controller ( name : str ) -> str : return f 'Hello {name} !' app = appdaora ( hello_controller ) Running the server (needs uvicorn installed ): uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Quering the server (needs curl installed ): curl -i localhost:8000/hello?name = World HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 14 \"Hello World!\"","title":"Simple example"},{"location":"#basic-example","text":"from typing import TypedDict from jsondaora import IntegerField , StringField , jsondaora from apidaora import Header , appdaora , route class Integer ( IntegerField , minimum = 18 ): ... class String ( StringField , max_length = 100 ): ... class Age ( Header , type = Integer ): ... @jsondaora class You ( TypedDict ): name : str last_name : str location : str age : int @jsondaora class ReqBody ( TypedDict ): last_name : str @jsondaora class HelloOutput ( TypedDict ): hello_message : str about_you : You @route . put ( '/hello/ {name} ' ) async def hello_controller ( name : str , location : String , age : Age , body : ReqBody ) -> HelloOutput : you = You ( name = name , location = location . value , age = age . value . value , last_name = body [ 'last_name' ], ) return HelloOutput ( hello_message = await hello_message ( name , location . value ), about_you = you ) async def hello_message ( name : str , location : str ) -> str : return f 'Hello {name} ! Welcome to {location} !' app = appdaora ( hello_controller ) Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Quering the server: curl -i -X PUT localhost:8000/hello/Me?location = World \\ -H 'x-age: 32' \\ -d '{\"last_name\":\"My Self\"}' HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 123 {\"hello_message\":\"Hello Me! Welcome to World!\",\"about_you\":{\"name\":\"Me\",\"location\":\"World\",\"age\":32,\"last_name\":\"My Self\"}}","title":"Basic example"},{"location":"#example-for-more-requestresponse-details","text":"from http import HTTPStatus from typing import Dict from jsondaora import jsondaora from apidaora import BadRequestError , Header , Response , appdaora , json , route # Domain layer, here are the domain related definitions # it is apidaora/framework/http independent @jsondaora class You : name : str last_name : str age : int DB : Dict [ str , You ] = {} def add_you ( you : You ) -> None : if you . name in DB : raise YouAlreadyBeenAddedError ( you . name ) DB [ you . name ] = you def get_you ( name : str ) -> You : try : return DB [ name ] except KeyError : raise YouWereNotFoundError ( name ) class DBError ( Exception ): @property def info ( self ) -> Dict [ str , str ]: return { 'name' : self . args [ 0 ]} class YouAlreadyBeenAddedError ( DBError ): name = 'you-already-been-added' class YouWereNotFoundError ( DBError ): name = 'you-were-not-found' # Application layer, here are the http related definitions # See: https://dutrdda.github.io/apidaora/tutorial/headers/ class ReqID ( Header , type = str , http_name = 'http_req_id' ): ... @route . post ( '/you/' ) async def add_you_controller ( req_id : ReqID , body : You ) -> Response : try : add_you ( body ) except YouAlreadyBeenAddedError as error : raise BadRequestError ( name = error . name , info = error . info ) from error return json ( body , HTTPStatus . CREATED , headers = ( req_id ,)) @route . get ( '/you/ {name} ' ) async def get_you_controller ( name : str , req_id : ReqID ) -> Response : try : return json ( get_you ( name ), headers = ( req_id ,)) except YouWereNotFoundError as error : raise BadRequestError ( name = error . name , info = error . info ) from error app = appdaora ([ add_you_controller , get_you_controller ]) Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Quering the server: curl -X POST -i localhost:8000/you/ -H 'http_req_id: 1a2b3c4d' -d '{\"name\":\"Me\",\"last_name\":\"Myself\",\"age\":32}' HTTP/1.1 201 Created date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 43 http_req_id: 1a2b3c4d {\"name\":\"Me\",\"last_name\":\"Myself\",\"age\":32} curl -i localhost:8000/you/Me -H 'http_req_id: 4d3c2b1a' HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 43 http_req_id: 4d3c2b1a {\"name\":\"Me\",\"last_name\":\"Myself\",\"age\":32}","title":"Example for more request/response details"},{"location":"#benchmark","text":"The full results can be found here","title":"Benchmark"},{"location":"changelog/","text":"CHANGELOG 0.28.0 - 2020-11-27 Add css and javascript content types 0.27.2 - 2020-08-31 Fix background_task module 0.27.1 - 2020-07-29 Add logging messages for bad requests 0.27.0 - 2020-07-08 Improve responses 0.26.1 - 2020-05-08 Fix tests for new jsondaora version 0.26.0 - 2020-04-14 Improve background task controller to return 303 instead 400 Refactor the package to has a common request object Change background task controller creation status code from 201 to 202 Fix background task controller finished task 0.25.0 - 2020-04-14 Refactor background task controller to build unique tasks ids when locking args Fix task_id on background tasks controller when lock args is true Fix RedisTasksRepository.get method 0.24.0 - 2020-04-13 Improve background task controller 0.23.0 - 2020-04-12 Create background tasks middlewares 0.22.1 - 2020-04-12 Fix factory when has middlewares and the controller has no inputs 0.22.0 - 2020-04-12 Improve router 0.21.0 - 2020-04-12 Create feature to pass kwargs through middlewares and controller Improve post_execution middleware Rename PreventRequestMiddleware to LockRequestMiddleware 0.20.0 - 2020-04-12 Add docs for background tasks with lock args and redis Create the feature task background lock by args Rename the feature background task single running to background task lock 0.19.0 - 2020-04-12 Fix middleware request parsing Create single running feature for background tasks 0.18.0 - 2020-04-11 Create prevent request middleware Fix merge of general middlewares and route middlewares Improve Request class 0.17.2 - 2020-04-10 Fix asgi headers for h11 http parser 0.17.1 - 2020-04-10 Fix cors middleware 0.17.0 - 2020-04-10 Improve post routing middleware 0.16.1 - 2020-04-10 Change docs to dark theme 0.16.0 - 2020-04-10 Add class controllers support 0.15.1 - 2020-04-10 Improve docs Fix make_not_found_response function [0.15.0 - 2020-04-10] Create default options controller Add middlewares support 0.14.1 - 2020-04-04 Fix controller_output serialization 0.14.0 - 2020-03-06 Add support for str bodies 0.13.0 - 2020-03-04 Create not_found and no_content responses types Add deserialization on query args Update devtools 0.12.0 - 2019-12-12 Add LRU cache for router to optimizing resolutions 0.11.4 - 2019-10-24 Fix background tasks redis 0.11.3 - 2019-10-24 Fix background tasks 0.11.2 - 2019-10-23 Improve mypy 0.11.1 - 2019-10-23 Add package typing 0.11.0 - 2019-10-22 Fix background task status code Create core module interface 0.10.0 - 2019-10-20 Add gzip upload support Create background tasks feature 0.9.0 - 2019-10-07 Improve response types Fix headers response 0.8.0 - 2019-10-07 Fix headers response 0.7.0 - 2019-10-06 Improve devtools Improve docs Refactor the entirely api 0.6.0 - 2019-10-04 Add devtools submodule Refactor path decorator Improve examples to use async def Update public interface Improve docs 0.5.0 (2019-09-20) Improves requests/responses objects 0.4.1 (2019-09-19) Improve docs 0.4.0 (2019-09-19) Rename typingjson project do jsondaora 0.3.0 (2019-09-19) Add TypedDict support Rename project 0.2.0 (2019-09-18) Refactor app and router modules 0.1.2 (2019-09-18) Improve docs 0.1.1 (2019-09-18) Fix docs 0.1.0 (2019-09-18) Add initial files","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"CHANGELOG"},{"location":"changelog/#0280-2020-11-27","text":"Add css and javascript content types","title":"0.28.0 - 2020-11-27"},{"location":"changelog/#0272-2020-08-31","text":"Fix background_task module","title":"0.27.2 - 2020-08-31"},{"location":"changelog/#0271-2020-07-29","text":"Add logging messages for bad requests","title":"0.27.1 - 2020-07-29"},{"location":"changelog/#0270-2020-07-08","text":"Improve responses","title":"0.27.0 - 2020-07-08"},{"location":"changelog/#0261-2020-05-08","text":"Fix tests for new jsondaora version","title":"0.26.1 - 2020-05-08"},{"location":"changelog/#0260-2020-04-14","text":"Improve background task controller to return 303 instead 400 Refactor the package to has a common request object Change background task controller creation status code from 201 to 202 Fix background task controller finished task","title":"0.26.0 - 2020-04-14"},{"location":"changelog/#0250-2020-04-14","text":"Refactor background task controller to build unique tasks ids when locking args Fix task_id on background tasks controller when lock args is true Fix RedisTasksRepository.get method","title":"0.25.0 - 2020-04-14"},{"location":"changelog/#0240-2020-04-13","text":"Improve background task controller","title":"0.24.0 - 2020-04-13"},{"location":"changelog/#0230-2020-04-12","text":"Create background tasks middlewares","title":"0.23.0 - 2020-04-12"},{"location":"changelog/#0221-2020-04-12","text":"Fix factory when has middlewares and the controller has no inputs","title":"0.22.1 - 2020-04-12"},{"location":"changelog/#0220-2020-04-12","text":"Improve router","title":"0.22.0 - 2020-04-12"},{"location":"changelog/#0210-2020-04-12","text":"Create feature to pass kwargs through middlewares and controller Improve post_execution middleware Rename PreventRequestMiddleware to LockRequestMiddleware","title":"0.21.0 - 2020-04-12"},{"location":"changelog/#0200-2020-04-12","text":"Add docs for background tasks with lock args and redis Create the feature task background lock by args Rename the feature background task single running to background task lock","title":"0.20.0 - 2020-04-12"},{"location":"changelog/#0190-2020-04-12","text":"Fix middleware request parsing Create single running feature for background tasks","title":"0.19.0 - 2020-04-12"},{"location":"changelog/#0180-2020-04-11","text":"Create prevent request middleware Fix merge of general middlewares and route middlewares Improve Request class","title":"0.18.0 - 2020-04-11"},{"location":"changelog/#0172-2020-04-10","text":"Fix asgi headers for h11 http parser","title":"0.17.2 - 2020-04-10"},{"location":"changelog/#0171-2020-04-10","text":"Fix cors middleware","title":"0.17.1 - 2020-04-10"},{"location":"changelog/#0170-2020-04-10","text":"Improve post routing middleware","title":"0.17.0 - 2020-04-10"},{"location":"changelog/#0161-2020-04-10","text":"Change docs to dark theme","title":"0.16.1 - 2020-04-10"},{"location":"changelog/#0160-2020-04-10","text":"Add class controllers support","title":"0.16.0 - 2020-04-10"},{"location":"changelog/#0151-2020-04-10","text":"Improve docs Fix make_not_found_response function","title":"0.15.1 - 2020-04-10"},{"location":"changelog/#0150-2020-04-10","text":"Create default options controller Add middlewares support","title":"[0.15.0 - 2020-04-10]"},{"location":"changelog/#0141-2020-04-04","text":"Fix controller_output serialization","title":"0.14.1 - 2020-04-04"},{"location":"changelog/#0140-2020-03-06","text":"Add support for str bodies","title":"0.14.0 - 2020-03-06"},{"location":"changelog/#0130-2020-03-04","text":"Create not_found and no_content responses types Add deserialization on query args Update devtools","title":"0.13.0 - 2020-03-04"},{"location":"changelog/#0120-2019-12-12","text":"Add LRU cache for router to optimizing resolutions","title":"0.12.0 - 2019-12-12"},{"location":"changelog/#0114-2019-10-24","text":"Fix background tasks redis","title":"0.11.4 - 2019-10-24"},{"location":"changelog/#0113-2019-10-24","text":"Fix background tasks","title":"0.11.3 - 2019-10-24"},{"location":"changelog/#0112-2019-10-23","text":"Improve mypy","title":"0.11.2 - 2019-10-23"},{"location":"changelog/#0111-2019-10-23","text":"Add package typing","title":"0.11.1 - 2019-10-23"},{"location":"changelog/#0110-2019-10-22","text":"Fix background task status code Create core module interface","title":"0.11.0 - 2019-10-22"},{"location":"changelog/#0100-2019-10-20","text":"Add gzip upload support Create background tasks feature","title":"0.10.0 - 2019-10-20"},{"location":"changelog/#090-2019-10-07","text":"Improve response types Fix headers response","title":"0.9.0 - 2019-10-07"},{"location":"changelog/#080-2019-10-07","text":"Fix headers response","title":"0.8.0 - 2019-10-07"},{"location":"changelog/#070-2019-10-06","text":"Improve devtools Improve docs Refactor the entirely api","title":"0.7.0 - 2019-10-06"},{"location":"changelog/#060-2019-10-04","text":"Add devtools submodule Refactor path decorator Improve examples to use async def Update public interface Improve docs","title":"0.6.0 - 2019-10-04"},{"location":"changelog/#050-2019-09-20","text":"Improves requests/responses objects","title":"0.5.0 (2019-09-20)"},{"location":"changelog/#041-2019-09-19","text":"Improve docs","title":"0.4.1 (2019-09-19)"},{"location":"changelog/#040-2019-09-19","text":"Rename typingjson project do jsondaora","title":"0.4.0 (2019-09-19)"},{"location":"changelog/#030-2019-09-19","text":"Add TypedDict support Rename project","title":"0.3.0 (2019-09-19)"},{"location":"changelog/#020-2019-09-18","text":"Refactor app and router modules","title":"0.2.0 (2019-09-18)"},{"location":"changelog/#012-2019-09-18","text":"Improve docs","title":"0.1.2 (2019-09-18)"},{"location":"changelog/#011-2019-09-18","text":"Fix docs","title":"0.1.1 (2019-09-18)"},{"location":"changelog/#010-2019-09-18","text":"Add initial files","title":"0.1.0 (2019-09-18)"},{"location":"contributing/","text":"Starting Development git clone git@github.com:dutradda/apidaora.git --recursive cd apidaora make setup-python-virtualenv source venv/bin/activate make setup-python-project bake setup-apidaora bake dependencies Running the integration suite: bake integration Other bake tasks: bake check-code bake tests-docs bake serve-docs bake add-changelog m = \"Add my cool feature\" You can run bake to see all tasks available.","title":"Development - Contributing"},{"location":"contributing/#starting-development","text":"git clone git@github.com:dutradda/apidaora.git --recursive cd apidaora make setup-python-virtualenv source venv/bin/activate make setup-python-project bake setup-apidaora bake dependencies","title":"Starting Development"},{"location":"contributing/#running-the-integration-suite","text":"bake integration","title":"Running the integration suite:"},{"location":"contributing/#other-bake-tasks","text":"bake check-code bake tests-docs bake serve-docs bake add-changelog m = \"Add my cool feature\" You can run bake to see all tasks available.","title":"Other bake tasks:"},{"location":"json/","text":"JavaScript Object Notation Introduction from w3schools : - https://www.w3schools.com/js/js_json_intro.asp JSON Schema Official Documentation: - https://json-schema.org","title":"JSON intro"},{"location":"json/#javascript-object-notation","text":"Introduction from w3schools : - https://www.w3schools.com/js/js_json_intro.asp","title":"JavaScript Object Notation"},{"location":"json/#json-schema","text":"Official Documentation: - https://json-schema.org","title":"JSON Schema"},{"location":"python-dataclass/","text":"Python 3.7 dataclasses module Official Documentation: - https://docs.python.org/3/library/dataclasses.html Dataclass Benchmark Data types performance comparision: - https://medium.com/@jacktator/dataclass-vs-namedtuple-vs-object-for-performance-optimization-in-python-691e234253b9","title":"Python dataclass intro"},{"location":"python-dataclass/#python-37-dataclasses-module","text":"Official Documentation: - https://docs.python.org/3/library/dataclasses.html","title":"Python 3.7 dataclasses module"},{"location":"python-dataclass/#dataclass-benchmark","text":"Data types performance comparision: - https://medium.com/@jacktator/dataclass-vs-namedtuple-vs-object-for-performance-optimization-in-python-691e234253b9","title":"Dataclass Benchmark"},{"location":"using-asgi-module/","text":"Using ASGI module Example from typing import TypedDict from jsondaora import jsondaora , typed_dict_asjson from apidaora.core import JSON_RESPONSE , appdaora_core , route @jsondaora class You ( TypedDict ): name : str location : str @route . get ( '/hello/ {name} ' , query = True ) async def hello_controller ( request ): # type: ignore you = You ( name = request . path_args [ 'name' ], location = request . query_dict [ 'location' ][ 0 ], ) body = typed_dict_asjson ( you , You ) return JSON_RESPONSE , body app = appdaora_core ( hello_controller ) Running Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Quering Quering the server: curl -i localhost:8000/hello/Me?location = World HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json transfer-encoding: chunked {\"name\":\"Me\",\"location\":\"World\"}","title":"Core Module"},{"location":"using-asgi-module/#using-asgi-module","text":"","title":"Using ASGI module"},{"location":"using-asgi-module/#example","text":"from typing import TypedDict from jsondaora import jsondaora , typed_dict_asjson from apidaora.core import JSON_RESPONSE , appdaora_core , route @jsondaora class You ( TypedDict ): name : str location : str @route . get ( '/hello/ {name} ' , query = True ) async def hello_controller ( request ): # type: ignore you = You ( name = request . path_args [ 'name' ], location = request . query_dict [ 'location' ][ 0 ], ) body = typed_dict_asjson ( you , You ) return JSON_RESPONSE , body app = appdaora_core ( hello_controller )","title":"Example"},{"location":"using-asgi-module/#running","text":"Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Running"},{"location":"using-asgi-module/#quering","text":"Quering the server: curl -i localhost:8000/hello/Me?location = World HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json transfer-encoding: chunked {\"name\":\"Me\",\"location\":\"World\"}","title":"Quering"},{"location":"using-class-controller/","text":"Using Class Controller Example from apidaora import ClassController , appdaora class HelloWorld ( ClassController , path = '/hello' ): def get ( self ) -> str : return 'Hello World!' def post ( self , body : str ) -> str : return f 'Hello {body} !' class HelloDuckType : path = '/hello-duck' def get ( self ) -> str : return 'Hello Duck!' app = appdaora ([ HelloWorld , HelloDuckType ]) Running Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Quering the .get method Quering the server: curl -i localhost:8000/hello HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 14 \"Hello World!\" Quering the .post method curl -i localhost:8000/hello -X POST -d 'Me' HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 11 \"Hello Me!\" Quering the duck type class with .get method curl -i localhost:8000/hello-duck HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 13 \"Hello Duck!\"","title":"Class Controllers"},{"location":"using-class-controller/#using-class-controller","text":"","title":"Using Class Controller"},{"location":"using-class-controller/#example","text":"from apidaora import ClassController , appdaora class HelloWorld ( ClassController , path = '/hello' ): def get ( self ) -> str : return 'Hello World!' def post ( self , body : str ) -> str : return f 'Hello {body} !' class HelloDuckType : path = '/hello-duck' def get ( self ) -> str : return 'Hello Duck!' app = appdaora ([ HelloWorld , HelloDuckType ])","title":"Example"},{"location":"using-class-controller/#running","text":"Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Running"},{"location":"using-class-controller/#quering-the-get-method","text":"Quering the server: curl -i localhost:8000/hello HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 14 \"Hello World!\"","title":"Quering the .get method"},{"location":"using-class-controller/#quering-the-post-method","text":"curl -i localhost:8000/hello -X POST -d 'Me' HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 11 \"Hello Me!\"","title":"Quering the .post method"},{"location":"using-class-controller/#quering-the-duck-type-class-with-get-method","text":"curl -i localhost:8000/hello-duck HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 13 \"Hello Duck!\"","title":"Quering the duck type class with .get method"},{"location":"using-options/","text":"Using Default Options Example from apidaora import appdaora , route @route . get ( '/app-options' ) async def app_options () -> str : return 'Options' @route . get ( '/route-options' , options = True ) async def route_options () -> str : return 'Options' app = appdaora ([ app_options , route_options ], options = True ) Running Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Quering the route options curl -i localhost:8000/app-options -X OPTIONS HTTP/1.1 204 No Content date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn allow: GET Quering the app options curl -i localhost:8000/route-options -X OPTIONS HTTP/1.1 204 No Content date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn allow: GET","title":"Default Options"},{"location":"using-options/#using-default-options","text":"","title":"Using Default Options"},{"location":"using-options/#example","text":"from apidaora import appdaora , route @route . get ( '/app-options' ) async def app_options () -> str : return 'Options' @route . get ( '/route-options' , options = True ) async def route_options () -> str : return 'Options' app = appdaora ([ app_options , route_options ], options = True )","title":"Example"},{"location":"using-options/#running","text":"Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Running"},{"location":"using-options/#quering-the-route-options","text":"curl -i localhost:8000/app-options -X OPTIONS HTTP/1.1 204 No Content date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn allow: GET","title":"Quering the route options"},{"location":"using-options/#quering-the-app-options","text":"curl -i localhost:8000/route-options -X OPTIONS HTTP/1.1 204 No Content date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn allow: GET","title":"Quering the app options"},{"location":"using-request-body-gzip/","text":"Using the gzip request body Example from apidaora import GZipFactory , appdaora , route class GzipBody ( GZipFactory ): mode = 'rt' @route . post ( '/hello' ) def gzip_hello ( body : GzipBody ) -> str : with body . open () as file : return file . read () app = appdaora ( gzip_hello ) Running Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Posting gzip file Posting the file to the api (needs gzip installed ): echo -n 'Hello World!' | gzip > hello.gz curl -X POST -i localhost:8000/hello --upload-file hello.gz HTTP/1.1 100 Continue HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 14 \"Hello World!\"","title":"Upload gzip files"},{"location":"using-request-body-gzip/#using-the-gzip-request-body","text":"","title":"Using the gzip request body"},{"location":"using-request-body-gzip/#example","text":"from apidaora import GZipFactory , appdaora , route class GzipBody ( GZipFactory ): mode = 'rt' @route . post ( '/hello' ) def gzip_hello ( body : GzipBody ) -> str : with body . open () as file : return file . read () app = appdaora ( gzip_hello )","title":"Example"},{"location":"using-request-body-gzip/#running","text":"Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Running"},{"location":"using-request-body-gzip/#posting-gzip-file","text":"Posting the file to the api (needs gzip installed ): echo -n 'Hello World!' | gzip > hello.gz curl -X POST -i localhost:8000/hello --upload-file hello.gz HTTP/1.1 100 Continue HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 14 \"Hello World!\"","title":"Posting gzip file"},{"location":"background-task-controller/","text":"Using Background Task Controller Example import time from apidaora import appdaora , route @route . background ( '/hello' ) def hello_task ( name : str ) -> str : time . sleep ( 1 ) return f 'Hello {name} !' app = appdaora ( hello_task ) Running Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Creating task Creating the task: curl -X POST -i localhost:8000/hello?name = Me HTTP/1.1 202 Accepted date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 159 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null} Quering Quering the server for the task (You must replace the task_id with the server output): curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 159 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null} Wait the task to finish and get results: sleep 1 && curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 220 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"status\":\"finished\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null}","title":"Background Task"},{"location":"background-task-controller/#using-background-task-controller","text":"","title":"Using Background Task Controller"},{"location":"background-task-controller/#example","text":"import time from apidaora import appdaora , route @route . background ( '/hello' ) def hello_task ( name : str ) -> str : time . sleep ( 1 ) return f 'Hello {name} !' app = appdaora ( hello_task )","title":"Example"},{"location":"background-task-controller/#running","text":"Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Running"},{"location":"background-task-controller/#creating-task","text":"Creating the task: curl -X POST -i localhost:8000/hello?name = Me HTTP/1.1 202 Accepted date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 159 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null}","title":"Creating task"},{"location":"background-task-controller/#quering","text":"Quering the server for the task (You must replace the task_id with the server output): curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 159 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null} Wait the task to finish and get results: sleep 1 && curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 220 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"status\":\"finished\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null}","title":"Quering"},{"location":"background-task-controller/async-redis/","text":"Using Background Task Controller with Redis Backend Example import asyncio import os from apidaora import appdaora , route REDIS_URI = f \"redis://{os.environ.get('REDIS', '')}\" @route . background ( '/hello' , tasks_repository_uri = REDIS_URI ) async def hello_task ( name : str ) -> str : await asyncio . sleep ( 1 ) return f 'Hello {name} !' app = appdaora ( hello_task ) Running You will need a redis server to run this example. Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Creating task Creating the task: curl -X POST -i localhost:8000/hello?name = Me HTTP/1.1 202 Accepted date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 159 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null} Quering Quering the server for the task (You must replace the task_id with the server output): curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 159 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null} Wait the task to finish and get results: sleep 1 && curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 220 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"finished\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null}","title":"Async Background Task with Redis"},{"location":"background-task-controller/async-redis/#using-background-task-controller-with-redis-backend","text":"","title":"Using Background Task Controller with Redis Backend"},{"location":"background-task-controller/async-redis/#example","text":"import asyncio import os from apidaora import appdaora , route REDIS_URI = f \"redis://{os.environ.get('REDIS', '')}\" @route . background ( '/hello' , tasks_repository_uri = REDIS_URI ) async def hello_task ( name : str ) -> str : await asyncio . sleep ( 1 ) return f 'Hello {name} !' app = appdaora ( hello_task )","title":"Example"},{"location":"background-task-controller/async-redis/#running","text":"You will need a redis server to run this example. Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Running"},{"location":"background-task-controller/async-redis/#creating-task","text":"Creating the task: curl -X POST -i localhost:8000/hello?name = Me HTTP/1.1 202 Accepted date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 159 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null}","title":"Creating task"},{"location":"background-task-controller/async-redis/#quering","text":"Quering the server for the task (You must replace the task_id with the server output): curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 159 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null} Wait the task to finish and get results: sleep 1 && curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 220 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"finished\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null}","title":"Quering"},{"location":"background-task-controller/async/","text":"Using Async Background Task Controller Example import asyncio from apidaora import appdaora , route # async tasks can potentially block yours application, use with care # it use is recommended just for small tasks or non-blocking operations @route . background ( '/hello' ) async def hello_task ( name : str ) -> str : await asyncio . sleep ( 1 ) return f 'Hello {name} !' app = appdaora ( hello_task ) Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Creating task Creating the task: curl -X POST -i localhost:8000/hello?name = Me HTTP/1.1 202 Accepted date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 159 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null} Quering Quering the server for the task (You must replace the task_id with the server output): curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 159 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null} Wait the task to finish and get results: sleep 1 && curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 220 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"status\":\"finished\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null}","title":"Async Background Task"},{"location":"background-task-controller/async/#using-async-background-task-controller","text":"","title":"Using Async Background Task Controller"},{"location":"background-task-controller/async/#example","text":"import asyncio from apidaora import appdaora , route # async tasks can potentially block yours application, use with care # it use is recommended just for small tasks or non-blocking operations @route . background ( '/hello' ) async def hello_task ( name : str ) -> str : await asyncio . sleep ( 1 ) return f 'Hello {name} !' app = appdaora ( hello_task ) Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Example"},{"location":"background-task-controller/async/#creating-task","text":"Creating the task: curl -X POST -i localhost:8000/hello?name = Me HTTP/1.1 202 Accepted date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 159 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null}","title":"Creating task"},{"location":"background-task-controller/async/#quering","text":"Quering the server for the task (You must replace the task_id with the server output): curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 159 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null} Wait the task to finish and get results: sleep 1 && curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 220 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"status\":\"finished\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null}","title":"Quering"},{"location":"background-task-controller/lock-args-redis/","text":"Using Redis Background Task Controller with Lock by Args Example import asyncio import os from apidaora import appdaora , route REDIS_URI = f \"redis://{os.environ.get('REDIS', '')}\" @route . background ( '/hello-single' , lock_args = True , tasks_repository_uri = REDIS_URI ) async def hello_task ( name : str ) -> str : await asyncio . sleep ( 1 ) return f 'Hello {name} !' app = appdaora ( hello_task ) Running Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Creating tasks Creating the task three times, getting error just on same arguments: curl -X POST -i localhost:8000/hello-single?name = Me echo && echo curl -X POST -i localhost:8000/hello-single?name = Me echo && echo curl -X POST -i localhost:8000/hello-single?name = You HTTP/1.1 202 Accepted date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 169 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"de01341028ac\"} HTTP/1.1 303 See Other date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn location: hello-single?task_id=b'4ee301eb-6487-48a0-b6ed-e5f576accfc2' x-apidaora-lock: args-signature transfer-encoding: chunked HTTP/1.1 202 Accepted date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 169 {\"task_id\":\"5ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"1d62d7c10b8b\"} Quering Quering the server for the tasks: curl -i localhost:8000/hello-single?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 echo && echo curl -i localhost:8000/hello-single?task_id = 5ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 169 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"de01341028ac\"} HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 169 {\"task_id\":\"5ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"1d62d7c10b8b\"} Wait the tasks to finish and get results: sleep 1 curl -i localhost:8000/hello-single?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 echo && echo curl -i localhost:8000/hello-single?task_id = 5ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 230 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"finished\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"de01341028ac\"} HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 231 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello You!\",\"task_id\":\"5ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"finished\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"1d62d7c10b8b\"} Creating another task Now the task should be able to run again curl -X POST -i localhost:8000/hello-single?name = Me HTTP/1.1 202 Accepted date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 169 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"de01341028ac\"} Quering Quering the server for the task (You must replace the task_id with the server output): curl -i localhost:8000/hello-single?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 169 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"de01341028ac\"} Wait the task to finish and get results: sleep 1 && curl -i localhost:8000/hello-single?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 230 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"finished\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"de01341028ac\"}","title":"Background Task with Lock by Args and Redis"},{"location":"background-task-controller/lock-args-redis/#using-redis-background-task-controller-with-lock-by-args","text":"","title":"Using Redis Background Task Controller with Lock by Args"},{"location":"background-task-controller/lock-args-redis/#example","text":"import asyncio import os from apidaora import appdaora , route REDIS_URI = f \"redis://{os.environ.get('REDIS', '')}\" @route . background ( '/hello-single' , lock_args = True , tasks_repository_uri = REDIS_URI ) async def hello_task ( name : str ) -> str : await asyncio . sleep ( 1 ) return f 'Hello {name} !' app = appdaora ( hello_task )","title":"Example"},{"location":"background-task-controller/lock-args-redis/#running","text":"Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Running"},{"location":"background-task-controller/lock-args-redis/#creating-tasks","text":"Creating the task three times, getting error just on same arguments: curl -X POST -i localhost:8000/hello-single?name = Me echo && echo curl -X POST -i localhost:8000/hello-single?name = Me echo && echo curl -X POST -i localhost:8000/hello-single?name = You HTTP/1.1 202 Accepted date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 169 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"de01341028ac\"} HTTP/1.1 303 See Other date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn location: hello-single?task_id=b'4ee301eb-6487-48a0-b6ed-e5f576accfc2' x-apidaora-lock: args-signature transfer-encoding: chunked HTTP/1.1 202 Accepted date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 169 {\"task_id\":\"5ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"1d62d7c10b8b\"}","title":"Creating tasks"},{"location":"background-task-controller/lock-args-redis/#quering","text":"Quering the server for the tasks: curl -i localhost:8000/hello-single?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 echo && echo curl -i localhost:8000/hello-single?task_id = 5ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 169 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"de01341028ac\"} HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 169 {\"task_id\":\"5ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"1d62d7c10b8b\"} Wait the tasks to finish and get results: sleep 1 curl -i localhost:8000/hello-single?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 echo && echo curl -i localhost:8000/hello-single?task_id = 5ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 230 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"finished\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"de01341028ac\"} HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 231 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello You!\",\"task_id\":\"5ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"finished\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"1d62d7c10b8b\"}","title":"Quering"},{"location":"background-task-controller/lock-args-redis/#creating-another-task","text":"Now the task should be able to run again curl -X POST -i localhost:8000/hello-single?name = Me HTTP/1.1 202 Accepted date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 169 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"de01341028ac\"}","title":"Creating another task"},{"location":"background-task-controller/lock-args-redis/#quering_1","text":"Quering the server for the task (You must replace the task_id with the server output): curl -i localhost:8000/hello-single?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 169 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"de01341028ac\"} Wait the task to finish and get results: sleep 1 && curl -i localhost:8000/hello-single?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 230 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"finished\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"de01341028ac\"}","title":"Quering"},{"location":"background-task-controller/lock-args/","text":"Using Background Task Controller with Lock by Args Example import time from apidaora import appdaora , route @route . background ( '/hello-single' , lock_args = True ) def hello_task ( name : str ) -> str : time . sleep ( 1 ) return f 'Hello {name} !' app = appdaora ( hello_task ) Running Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Creating tasks Creating the task three times, getting error just on same arguments: curl -X POST -i localhost:8000/hello-single?name = Me echo && echo curl -X POST -i localhost:8000/hello-single?name = Me echo && echo curl -X POST -i localhost:8000/hello-single?name = You HTTP/1.1 202 Accepted date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 169 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"de01341028ac\"} HTTP/1.1 303 See Other date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn location: hello-single?task_id=4ee301eb-6487-48a0-b6ed-e5f576accfc2 x-apidaora-lock: args-signature transfer-encoding: chunked HTTP/1.1 202 Accepted date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 169 {\"task_id\":\"5ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"1d62d7c10b8b\"} Quering Quering the server for the tasks: curl -i localhost:8000/hello-single?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 echo && echo curl -i localhost:8000/hello-single?task_id = 5ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 169 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"de01341028ac\"} HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 169 {\"task_id\":\"5ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"1d62d7c10b8b\"} Wait the tasks to finish and get results: sleep 1 curl -i localhost:8000/hello-single?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 echo && echo curl -i localhost:8000/hello-single?task_id = 5ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 230 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"status\":\"finished\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"de01341028ac\"} HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 231 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello You!\",\"status\":\"finished\",\"task_id\":\"5ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"1d62d7c10b8b\"} Creating another task Now the task should be able to run again curl -X POST -i localhost:8000/hello-single?name = Me HTTP/1.1 202 Accepted date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 169 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"de01341028ac\"} Quering Quering the server for the task (You must replace the task_id with the server output): curl -i localhost:8000/hello-single?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 169 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"de01341028ac\"} Wait the task to finish and get results: sleep 1 && curl -i localhost:8000/hello-single?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 230 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"status\":\"finished\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"de01341028ac\"}","title":"Background Task with Lock by Args"},{"location":"background-task-controller/lock-args/#using-background-task-controller-with-lock-by-args","text":"","title":"Using Background Task Controller with Lock by Args"},{"location":"background-task-controller/lock-args/#example","text":"import time from apidaora import appdaora , route @route . background ( '/hello-single' , lock_args = True ) def hello_task ( name : str ) -> str : time . sleep ( 1 ) return f 'Hello {name} !' app = appdaora ( hello_task )","title":"Example"},{"location":"background-task-controller/lock-args/#running","text":"Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Running"},{"location":"background-task-controller/lock-args/#creating-tasks","text":"Creating the task three times, getting error just on same arguments: curl -X POST -i localhost:8000/hello-single?name = Me echo && echo curl -X POST -i localhost:8000/hello-single?name = Me echo && echo curl -X POST -i localhost:8000/hello-single?name = You HTTP/1.1 202 Accepted date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 169 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"de01341028ac\"} HTTP/1.1 303 See Other date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn location: hello-single?task_id=4ee301eb-6487-48a0-b6ed-e5f576accfc2 x-apidaora-lock: args-signature transfer-encoding: chunked HTTP/1.1 202 Accepted date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 169 {\"task_id\":\"5ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"1d62d7c10b8b\"}","title":"Creating tasks"},{"location":"background-task-controller/lock-args/#quering","text":"Quering the server for the tasks: curl -i localhost:8000/hello-single?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 echo && echo curl -i localhost:8000/hello-single?task_id = 5ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 169 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"de01341028ac\"} HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 169 {\"task_id\":\"5ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"1d62d7c10b8b\"} Wait the tasks to finish and get results: sleep 1 curl -i localhost:8000/hello-single?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 echo && echo curl -i localhost:8000/hello-single?task_id = 5ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 230 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"status\":\"finished\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"de01341028ac\"} HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 231 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello You!\",\"status\":\"finished\",\"task_id\":\"5ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"1d62d7c10b8b\"}","title":"Quering"},{"location":"background-task-controller/lock-args/#creating-another-task","text":"Now the task should be able to run again curl -X POST -i localhost:8000/hello-single?name = Me HTTP/1.1 202 Accepted date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 169 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"de01341028ac\"}","title":"Creating another task"},{"location":"background-task-controller/lock-args/#quering_1","text":"Quering the server for the task (You must replace the task_id with the server output): curl -i localhost:8000/hello-single?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 169 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"de01341028ac\"} Wait the task to finish and get results: sleep 1 && curl -i localhost:8000/hello-single?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 230 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"status\":\"finished\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":\"de01341028ac\"}","title":"Quering"},{"location":"background-task-controller/lock/","text":"Using Background Task Controller with Lock Example import time from apidaora import appdaora , route @route . background ( '/hello-single' , lock = True ) def hello_task ( name : str ) -> str : time . sleep ( 1 ) return f 'Hello {name} !' app = appdaora ( hello_task ) Running Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Creating tasks Creating the task twice, getting error on second: curl -X POST -i localhost:8000/hello-single?name = Me echo && echo curl -X POST -i localhost:8000/hello-single?name = Me HTTP/1.1 202 Accepted date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 159 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null} HTTP/1.1 303 See Other date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn location: hello-single?task_id=4ee301eb-6487-48a0-b6ed-e5f576accfc2 x-apidaora-lock: signature transfer-encoding: chunked Quering Quering the server for the task (You must replace the task_id with the server output): curl -i localhost:8000/hello-single?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 159 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null} Wait the task to finish and get results: sleep 1 && curl -i localhost:8000/hello-single?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 220 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"status\":\"finished\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null} Creating another task Now the task should be able to run again curl -X POST -i localhost:8000/hello-single?name = Me HTTP/1.1 202 Accepted date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 159 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null} Quering Quering the server for the task (You must replace the task_id with the server output): curl -i localhost:8000/hello-single?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 159 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null} Wait the task to finish and get results: sleep 1 && curl -i localhost:8000/hello-single?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 220 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"status\":\"finished\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null}","title":"Background Task with Lock"},{"location":"background-task-controller/lock/#using-background-task-controller-with-lock","text":"","title":"Using Background Task Controller with Lock"},{"location":"background-task-controller/lock/#example","text":"import time from apidaora import appdaora , route @route . background ( '/hello-single' , lock = True ) def hello_task ( name : str ) -> str : time . sleep ( 1 ) return f 'Hello {name} !' app = appdaora ( hello_task )","title":"Example"},{"location":"background-task-controller/lock/#running","text":"Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Running"},{"location":"background-task-controller/lock/#creating-tasks","text":"Creating the task twice, getting error on second: curl -X POST -i localhost:8000/hello-single?name = Me echo && echo curl -X POST -i localhost:8000/hello-single?name = Me HTTP/1.1 202 Accepted date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 159 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null} HTTP/1.1 303 See Other date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn location: hello-single?task_id=4ee301eb-6487-48a0-b6ed-e5f576accfc2 x-apidaora-lock: signature transfer-encoding: chunked","title":"Creating tasks"},{"location":"background-task-controller/lock/#quering","text":"Quering the server for the task (You must replace the task_id with the server output): curl -i localhost:8000/hello-single?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 159 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null} Wait the task to finish and get results: sleep 1 && curl -i localhost:8000/hello-single?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 220 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"status\":\"finished\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null}","title":"Quering"},{"location":"background-task-controller/lock/#creating-another-task","text":"Now the task should be able to run again curl -X POST -i localhost:8000/hello-single?name = Me HTTP/1.1 202 Accepted date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 159 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null}","title":"Creating another task"},{"location":"background-task-controller/lock/#quering_1","text":"Quering the server for the task (You must replace the task_id with the server output): curl -i localhost:8000/hello-single?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 159 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null} Wait the task to finish and get results: sleep 1 && curl -i localhost:8000/hello-single?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 220 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"status\":\"finished\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null}","title":"Quering"},{"location":"background-task-controller/redis/","text":"Using Background Task Controller with Redis Backend Example import os import time from apidaora import appdaora , route REDIS_URI = f \"redis://{os.environ.get('REDIS', '')}\" @route . background ( '/hello' , tasks_repository_uri = REDIS_URI ) def hello_task ( name : str ) -> str : time . sleep ( 1 ) return f 'Hello {name} !' app = appdaora ( hello_task ) Running You will need a redis server to run this example. Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Creating task Creating the task: curl -X POST -i localhost:8000/hello?name = Me HTTP/1.1 202 Accepted date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 159 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null} Quering Quering the server for the task (You must replace the task_id with the server output): curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 159 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null} Wait the task to finish and get results: sleep 1 && curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 220 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"finished\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null}","title":"Background Task with Redis"},{"location":"background-task-controller/redis/#using-background-task-controller-with-redis-backend","text":"","title":"Using Background Task Controller with Redis Backend"},{"location":"background-task-controller/redis/#example","text":"import os import time from apidaora import appdaora , route REDIS_URI = f \"redis://{os.environ.get('REDIS', '')}\" @route . background ( '/hello' , tasks_repository_uri = REDIS_URI ) def hello_task ( name : str ) -> str : time . sleep ( 1 ) return f 'Hello {name} !' app = appdaora ( hello_task )","title":"Example"},{"location":"background-task-controller/redis/#running","text":"You will need a redis server to run this example. Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Running"},{"location":"background-task-controller/redis/#creating-task","text":"Creating the task: curl -X POST -i localhost:8000/hello?name = Me HTTP/1.1 202 Accepted date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 159 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null}","title":"Creating task"},{"location":"background-task-controller/redis/#quering","text":"Quering the server for the task (You must replace the task_id with the server output): curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 159 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null} Wait the task to finish and get results: sleep 1 && curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 220 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"finished\",\"signature\":\"aedb1ee4c3c7\",\"args_signature\":null}","title":"Quering"},{"location":"middlewares/","text":"Using Middlewares Example from jsondaora import jsondaora from apidaora import ( CorsMiddleware , Header , Middlewares , Request , Response , appdaora , route , text , ) def pre_execution_middleware ( request : Request ) -> None : if request . body : request . body . name = request . body . name . replace ( 'Me' , 'You' ) def post_execution_middleware ( request : Request , response : Response ) -> None : response . headers = [ PostExecutionHeader ( len ( response . body . replace ( 'Hello ' , '' ) . replace ( '!' , '' )) ) ] # The route middlewares takes precedence over general middlewares @jsondaora class PreExecutionBody : name : str @route . post ( '/hello-pre-execution/' , middlewares = Middlewares ( pre_execution = [ pre_execution_middleware ]), ) async def pre_execution_middleware_controller ( body : PreExecutionBody ) -> str : return hello ( body . name ) class PostExecutionHeader ( Header , type = int , http_name = 'x-name-len' ): ... @route . get ( '/hello-post-execution' , middlewares = Middlewares ( post_execution = [ post_execution_middleware ]), ) async def post_execution_middleware_controller ( name : str ) -> Response : return text ( body = hello ( name )) def hello ( name : str ) -> str : return f 'Hello {name} !' app = appdaora ( [ pre_execution_middleware_controller , post_execution_middleware_controller , ], middlewares = Middlewares ( post_execution = [ CorsMiddleware ( servers_all = 'my-server.domain' )] ), ) Running Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Quering the Pre Executition Middleware curl -i localhost:8000/hello-pre-execution -X POST -d '{\"name\": \"Me\"}' HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 12 access-control-allow-origin: my-server.domain access-control-expose-headers: my-server.domain access-control-allow-headers: my-server.domain access-control-allow-methods: my-server.domain \"Hello You!\" Quering the Post Executition Middleware curl -i 'localhost:8000/hello-post-execution?name=Me' HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: text/plain content-length: 9 x-name-len: 2 access-control-allow-origin: my-server.domain access-control-expose-headers: my-server.domain access-control-allow-headers: my-server.domain access-control-allow-methods: my-server.domain Hello Me!","title":"Middlewares"},{"location":"middlewares/#using-middlewares","text":"","title":"Using Middlewares"},{"location":"middlewares/#example","text":"from jsondaora import jsondaora from apidaora import ( CorsMiddleware , Header , Middlewares , Request , Response , appdaora , route , text , ) def pre_execution_middleware ( request : Request ) -> None : if request . body : request . body . name = request . body . name . replace ( 'Me' , 'You' ) def post_execution_middleware ( request : Request , response : Response ) -> None : response . headers = [ PostExecutionHeader ( len ( response . body . replace ( 'Hello ' , '' ) . replace ( '!' , '' )) ) ] # The route middlewares takes precedence over general middlewares @jsondaora class PreExecutionBody : name : str @route . post ( '/hello-pre-execution/' , middlewares = Middlewares ( pre_execution = [ pre_execution_middleware ]), ) async def pre_execution_middleware_controller ( body : PreExecutionBody ) -> str : return hello ( body . name ) class PostExecutionHeader ( Header , type = int , http_name = 'x-name-len' ): ... @route . get ( '/hello-post-execution' , middlewares = Middlewares ( post_execution = [ post_execution_middleware ]), ) async def post_execution_middleware_controller ( name : str ) -> Response : return text ( body = hello ( name )) def hello ( name : str ) -> str : return f 'Hello {name} !' app = appdaora ( [ pre_execution_middleware_controller , post_execution_middleware_controller , ], middlewares = Middlewares ( post_execution = [ CorsMiddleware ( servers_all = 'my-server.domain' )] ), )","title":"Example"},{"location":"middlewares/#running","text":"Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Running"},{"location":"middlewares/#quering-the-pre-executition-middleware","text":"curl -i localhost:8000/hello-pre-execution -X POST -d '{\"name\": \"Me\"}' HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 12 access-control-allow-origin: my-server.domain access-control-expose-headers: my-server.domain access-control-allow-headers: my-server.domain access-control-allow-methods: my-server.domain \"Hello You!\"","title":"Quering the Pre Executition Middleware"},{"location":"middlewares/#quering-the-post-executition-middleware","text":"curl -i 'localhost:8000/hello-post-execution?name=Me' HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: text/plain content-length: 9 x-name-len: 2 access-control-allow-origin: my-server.domain access-control-expose-headers: my-server.domain access-control-allow-headers: my-server.domain access-control-allow-methods: my-server.domain Hello Me!","title":"Quering the Post Executition Middleware"},{"location":"middlewares/background-tasks-async/","text":"Using Background Tasks Middleware Example from apidaora import ( BackgroundTaskMiddleware , Middlewares , Response , appdaora , route , text , ) class HelloCounter : counter = 1 @classmethod async def count ( cls ) -> None : cls . counter += 1 @route . get ( '/background-tasks' ) async def background_tasks_controller ( name : str ) -> Response : return text ( f 'Hello {name} ! \\n {name} are the # {HelloCounter.counter} !' , background_tasks = HelloCounter . count , ) app = appdaora ( background_tasks_controller , middlewares = Middlewares ( post_execution = BackgroundTaskMiddleware ()), ) Running Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Quering the server curl -i localhost:8000/background-tasks?name = Me echo && echo curl -i localhost:8000/background-tasks?name = You HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: text/plain content-length: 24 Hello Me! Me are the #1! HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: text/plain content-length: 26 Hello You! You are the #2!","title":"Async Background Tasks"},{"location":"middlewares/background-tasks-async/#using-background-tasks-middleware","text":"","title":"Using Background Tasks Middleware"},{"location":"middlewares/background-tasks-async/#example","text":"from apidaora import ( BackgroundTaskMiddleware , Middlewares , Response , appdaora , route , text , ) class HelloCounter : counter = 1 @classmethod async def count ( cls ) -> None : cls . counter += 1 @route . get ( '/background-tasks' ) async def background_tasks_controller ( name : str ) -> Response : return text ( f 'Hello {name} ! \\n {name} are the # {HelloCounter.counter} !' , background_tasks = HelloCounter . count , ) app = appdaora ( background_tasks_controller , middlewares = Middlewares ( post_execution = BackgroundTaskMiddleware ()), )","title":"Example"},{"location":"middlewares/background-tasks-async/#running","text":"Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Running"},{"location":"middlewares/background-tasks-async/#quering-the-server","text":"curl -i localhost:8000/background-tasks?name = Me echo && echo curl -i localhost:8000/background-tasks?name = You HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: text/plain content-length: 24 Hello Me! Me are the #1! HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: text/plain content-length: 26 Hello You! You are the #2!","title":"Quering the server"},{"location":"middlewares/background-tasks/","text":"Using Background Tasks Middleware Example from apidaora import ( BackgroundTaskMiddleware , Middlewares , Response , appdaora , route , text , ) class HelloCounter : counter = 1 @classmethod def count ( cls ) -> None : cls . counter += 1 @route . get ( '/background-tasks' ) async def background_tasks_controller ( name : str ) -> Response : return text ( f 'Hello {name} ! \\n {name} are the # {HelloCounter.counter} !' , background_tasks = HelloCounter . count , ) app = appdaora ( background_tasks_controller , middlewares = Middlewares ( post_execution = BackgroundTaskMiddleware ()), ) Running Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Quering the server curl -i localhost:8000/background-tasks?name = Me echo && echo curl -i localhost:8000/background-tasks?name = You HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: text/plain content-length: 24 Hello Me! Me are the #1! HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: text/plain content-length: 26 Hello You! You are the #2!","title":"Background Tasks"},{"location":"middlewares/background-tasks/#using-background-tasks-middleware","text":"","title":"Using Background Tasks Middleware"},{"location":"middlewares/background-tasks/#example","text":"from apidaora import ( BackgroundTaskMiddleware , Middlewares , Response , appdaora , route , text , ) class HelloCounter : counter = 1 @classmethod def count ( cls ) -> None : cls . counter += 1 @route . get ( '/background-tasks' ) async def background_tasks_controller ( name : str ) -> Response : return text ( f 'Hello {name} ! \\n {name} are the # {HelloCounter.counter} !' , background_tasks = HelloCounter . count , ) app = appdaora ( background_tasks_controller , middlewares = Middlewares ( post_execution = BackgroundTaskMiddleware ()), )","title":"Example"},{"location":"middlewares/background-tasks/#running","text":"Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Running"},{"location":"middlewares/background-tasks/#quering-the-server","text":"curl -i localhost:8000/background-tasks?name = Me echo && echo curl -i localhost:8000/background-tasks?name = You HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: text/plain content-length: 24 Hello Me! Me are the #1! HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: text/plain content-length: 26 Hello You! You are the #2!","title":"Quering the server"},{"location":"middlewares/extra-args/","text":"Using Extra Arguments Middlewares Example from typing import Any from apidaora import Middlewares , Request , Response , appdaora , route , text def request_extra_args ( request : Request ) -> None : request . ctx [ 'extra' ] = 'You' def response_extra_args ( request : Request , response : Response ) -> None : if request . ctx and response . ctx : response . body = response . body . replace ( 'You' , f \" {request.ctx['extra']} and {response.ctx['name']} \" ) @route . get ( '/middlewares-ctx' , middlewares = Middlewares ( pre_execution = request_extra_args , post_execution = response_extra_args , ), ) async def extra_args_controller ( name : str , ** kwargs : Any ) -> Response : return text ( hello ( kwargs [ 'extra' ]), name = name ) def hello ( name : str ) -> str : return f 'Hello {name} !' app = appdaora ( extra_args_controller ) Running Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Quering the server curl -i localhost:8000/middlewares-ctx?name = Me HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: text/plain content-length: 17 Hello You and Me!","title":"Extra Arguments"},{"location":"middlewares/extra-args/#using-extra-arguments-middlewares","text":"","title":"Using Extra Arguments Middlewares"},{"location":"middlewares/extra-args/#example","text":"from typing import Any from apidaora import Middlewares , Request , Response , appdaora , route , text def request_extra_args ( request : Request ) -> None : request . ctx [ 'extra' ] = 'You' def response_extra_args ( request : Request , response : Response ) -> None : if request . ctx and response . ctx : response . body = response . body . replace ( 'You' , f \" {request.ctx['extra']} and {response.ctx['name']} \" ) @route . get ( '/middlewares-ctx' , middlewares = Middlewares ( pre_execution = request_extra_args , post_execution = response_extra_args , ), ) async def extra_args_controller ( name : str , ** kwargs : Any ) -> Response : return text ( hello ( kwargs [ 'extra' ]), name = name ) def hello ( name : str ) -> str : return f 'Hello {name} !' app = appdaora ( extra_args_controller )","title":"Example"},{"location":"middlewares/extra-args/#running","text":"Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Running"},{"location":"middlewares/extra-args/#quering-the-server","text":"curl -i localhost:8000/middlewares-ctx?name = Me HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: text/plain content-length: 17 Hello You and Me!","title":"Quering the server"}]}